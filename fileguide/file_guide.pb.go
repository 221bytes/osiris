// Code generated by protoc-gen-go.
// source: file_guide.proto
// DO NOT EDIT!

/*
Package fileguide is a generated protocol buffer package.

It is generated from these files:
	file_guide.proto

It has these top-level messages:
	FileChunk
	Filename
	FileSummary
*/
package fileguide

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileChunk struct {
	Chunk    []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
}

func (m *FileChunk) Reset()                    { *m = FileChunk{} }
func (m *FileChunk) String() string            { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()               {}
func (*FileChunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FileChunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *FileChunk) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type Filename struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Filename) Reset()                    { *m = Filename{} }
func (m *Filename) String() string            { return proto.CompactTextString(m) }
func (*Filename) ProtoMessage()               {}
func (*Filename) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Filename) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FileSummary struct {
	// The number of points received.
	ChunkCount int64 `protobuf:"varint,1,opt,name=chunk_count,json=chunkCount" json:"chunk_count,omitempty"`
	// The number of known features passed while traversing the route.
	ByteCount int64 `protobuf:"varint,2,opt,name=byte_count,json=byteCount" json:"byte_count,omitempty"`
	// The duration of the traversal in seconds.
	ElapsedTime int64 `protobuf:"varint,3,opt,name=elapsed_time,json=elapsedTime" json:"elapsed_time,omitempty"`
}

func (m *FileSummary) Reset()                    { *m = FileSummary{} }
func (m *FileSummary) String() string            { return proto.CompactTextString(m) }
func (*FileSummary) ProtoMessage()               {}
func (*FileSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileSummary) GetChunkCount() int64 {
	if m != nil {
		return m.ChunkCount
	}
	return 0
}

func (m *FileSummary) GetByteCount() int64 {
	if m != nil {
		return m.ByteCount
	}
	return 0
}

func (m *FileSummary) GetElapsedTime() int64 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func init() {
	proto.RegisterType((*FileChunk)(nil), "fileguide.FileChunk")
	proto.RegisterType((*Filename)(nil), "fileguide.Filename")
	proto.RegisterType((*FileSummary)(nil), "fileguide.FileSummary")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FileGuide service

type FileGuideClient interface {
	SaveFile(ctx context.Context, opts ...grpc.CallOption) (FileGuide_SaveFileClient, error)
	GetFile(ctx context.Context, in *Filename, opts ...grpc.CallOption) (FileGuide_GetFileClient, error)
}

type fileGuideClient struct {
	cc *grpc.ClientConn
}

func NewFileGuideClient(cc *grpc.ClientConn) FileGuideClient {
	return &fileGuideClient{cc}
}

func (c *fileGuideClient) SaveFile(ctx context.Context, opts ...grpc.CallOption) (FileGuide_SaveFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FileGuide_serviceDesc.Streams[0], c.cc, "/fileguide.FileGuide/SaveFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileGuideSaveFileClient{stream}
	return x, nil
}

type FileGuide_SaveFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*FileSummary, error)
	grpc.ClientStream
}

type fileGuideSaveFileClient struct {
	grpc.ClientStream
}

func (x *fileGuideSaveFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileGuideSaveFileClient) CloseAndRecv() (*FileSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileGuideClient) GetFile(ctx context.Context, in *Filename, opts ...grpc.CallOption) (FileGuide_GetFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FileGuide_serviceDesc.Streams[1], c.cc, "/fileguide.FileGuide/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileGuideGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileGuide_GetFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type fileGuideGetFileClient struct {
	grpc.ClientStream
}

func (x *fileGuideGetFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FileGuide service

type FileGuideServer interface {
	SaveFile(FileGuide_SaveFileServer) error
	GetFile(*Filename, FileGuide_GetFileServer) error
}

func RegisterFileGuideServer(s *grpc.Server, srv FileGuideServer) {
	s.RegisterService(&_FileGuide_serviceDesc, srv)
}

func _FileGuide_SaveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileGuideServer).SaveFile(&fileGuideSaveFileServer{stream})
}

type FileGuide_SaveFileServer interface {
	SendAndClose(*FileSummary) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type fileGuideSaveFileServer struct {
	grpc.ServerStream
}

func (x *fileGuideSaveFileServer) SendAndClose(m *FileSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileGuideSaveFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileGuide_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filename)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileGuideServer).GetFile(m, &fileGuideGetFileServer{stream})
}

type FileGuide_GetFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type fileGuideGetFileServer struct {
	grpc.ServerStream
}

func (x *fileGuideGetFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _FileGuide_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fileguide.FileGuide",
	HandlerType: (*FileGuideServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveFile",
			Handler:       _FileGuide_SaveFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _FileGuide_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file_guide.proto",
}

func init() { proto.RegisterFile("file_guide.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4f, 0x83, 0x40,
	0x10, 0x85, 0xbb, 0xad, 0x3f, 0x60, 0xe8, 0xc1, 0x8c, 0x8d, 0x21, 0x24, 0x6a, 0xdd, 0x13, 0x27,
	0x62, 0xf4, 0xe2, 0x41, 0x4f, 0x4d, 0xda, 0x3b, 0xf5, 0x4e, 0x68, 0x3b, 0xea, 0x46, 0x16, 0x48,
	0x5d, 0x4c, 0x7a, 0xf6, 0x1f, 0x37, 0x33, 0x6c, 0x38, 0x34, 0xbd, 0xcd, 0x7c, 0xef, 0x63, 0xc2,
	0x5b, 0xb8, 0xfa, 0x30, 0x15, 0x15, 0x9f, 0x9d, 0xd9, 0x51, 0xd6, 0xee, 0x1b, 0xd7, 0x60, 0xc8,
	0x44, 0x80, 0x7e, 0x83, 0x70, 0x69, 0x2a, 0x5a, 0x7c, 0x75, 0xf5, 0x37, 0xce, 0xe0, 0x7c, 0xcb,
	0x43, 0xac, 0xe6, 0x2a, 0x9d, 0xe6, 0xfd, 0x82, 0x09, 0x04, 0xec, 0xd7, 0xa5, 0xa5, 0x78, 0x3c,
	0x57, 0x69, 0x98, 0x0f, 0xbb, 0xbe, 0x83, 0x60, 0xe9, 0x67, 0x44, 0x38, 0x13, 0x47, 0x89, 0x23,
	0xb3, 0x6e, 0x21, 0xe2, 0x7c, 0xdd, 0x59, 0x5b, 0xee, 0x0f, 0x78, 0x0f, 0x91, 0xdc, 0x2c, 0xb6,
	0x4d, 0x57, 0x3b, 0x31, 0x27, 0x39, 0x08, 0x5a, 0x30, 0xc1, 0x5b, 0x80, 0xcd, 0xc1, 0x91, 0xcf,
	0xc7, 0x92, 0x87, 0x4c, 0xfa, 0xf8, 0x01, 0xa6, 0x54, 0x95, 0xed, 0x0f, 0xed, 0x0a, 0x67, 0x2c,
	0xc5, 0x13, 0x11, 0x22, 0xcf, 0xde, 0x8d, 0xa5, 0xa7, 0x3f, 0xd5, 0x37, 0x5a, 0x71, 0x3d, 0x7c,
	0x85, 0x60, 0x5d, 0xfe, 0x12, 0x03, 0x9c, 0x65, 0x43, 0xed, 0x6c, 0xe8, 0x9c, 0xdc, 0x1c, 0x51,
	0xff, 0xab, 0x7a, 0x94, 0x2a, 0x7c, 0x81, 0xcb, 0x15, 0x39, 0xf9, 0xf8, 0xfa, 0x48, 0xe3, 0x76,
	0xc9, 0xc9, 0x8b, 0x7a, 0xf4, 0xa8, 0x36, 0x17, 0xf2, 0xd0, 0xcf, 0xff, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x3a, 0x80, 0xac, 0x93, 0x7c, 0x01, 0x00, 0x00,
}
